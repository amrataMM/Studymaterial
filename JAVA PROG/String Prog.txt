: How do you check if a string is a palindrome in Java?
String str = "racecar";
boolean isPalindrome = true;
for (int i = 0; i < str.length() / 2; i++) {
    if (str.charAt(i) != str.charAt(str.length() - i - 1)) {
        isPalindrome = false;
        break;
    }
}
System.out.println(isPalindrome);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you check if a string contains a substring in Java?
String str = "hello world";
if (str.contains("world")) {
    System.out.println("Substring found");
} else {
    System.out.println("Substring not found");
}
[10:44 AM, 3/28/2023] Class Manas: How do you find the second most repeated character in a string in Java?
String str = "hello world";
Map<Character, Integer> map = new HashMap<>();
for (char c : str.toCharArray()) {
    map.put(c, map.getOrDefault(c, 0) + 1);
}
int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE;
char secondMostRepeated = '\0';
for (Map.Entry<Character, Integer> entry : map.entrySet()) {
    int count = entry.getValue();
    if (count > max1) {
        max2 = max1;
        max1 = count;
        secondMostRepeated = entry.getKey();
    } else if (
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you find the first non-repeated character in a string in Java?

String str = "hello world";
Map<Character, Integer> map = new LinkedHashMap<>();
for (char c : str.toCharArray()) {
    map.put(c, map.getOrDefault(c, 0) + 1);
}
for (Map.Entry<Character, Integer> entry : map.entrySet()) {
    if (entry.getValue() == 1) {
        System.out.println(entry.getKey()); // Output: h
        break;
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you check if two strings are anagrams in Java?
String str1 = "listen";
String str2 = "silent";
char[] arr1 = str1.toCharArray();
char[] arr2 = str2.toCharArray();
Arrays.sort(arr1);
Arrays.sort(arr2);
if (Arrays.equals(arr1, arr2)) {
    System.out.println("Strings are anagrams");
} else {
    System.out.println("Strings are not anagrams");
}
[10:46 AM, 3/28/2023] Class Manas: How do you reverse a string in Java?

String str = "hello world";
StringBuilder sb = new StringBuilder();
for (int i = str.length() - 1; i >= 0; i--) {
    sb.append(str.charAt(i));
}
String reversedStr = sb.toString();
System.out.println(reversedStr); // Output: dlrow olleh
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you check if a string is a palindrome in Java?

String str = "racecar";
int i = 0, j = str.length() - 1;
while (i < j) {
    if (str.charAt(i) != str.charAt(j)) {
        System.out.println("String is not a palindrome");
        return;
    }
    i++;
    j--;
}
System.out.println("String is a palindrome"); // Output: String is a palindrome

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you find the longest palindrome substring in a string in Java?
String str = "babad";
String longestPalindrome = "";
for (int i = 0; i < str.length(); i++) {
    for (int j = i + 1; j <= str.length(); j++) {
        String subStr = str.substring(i, j);
        if (isPalindrome(subStr) && subStr.length() > longestPalindrome.length()) {
            longestPalindrome = subStr;
        }
    }
}
System.out.println(longestPalindrome); // Output: bab

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you remove all duplicates from a string in Java?
String str = "hello world";
Set<Character> set = new LinkedHashSet<>();
for (char c : str.toCharArray()) {
    set.add(c);
}
StringBuilder sb = new StringBuilder();
for (char c : set) {
    sb.append(c);
}
String newStr = sb.toString();
System.out.println(newStr); // Output: helo wrd
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================================================================================================
: How do you find the length of the longest substring without repeating characters in a string in Java?
String str = "abcabcbb";
Map<Character, Integer> map = new HashMap<>();
int maxLength = 0, start = 0;
for (int i = 0; i < str.length(); i++) {
    char c = str.charAt(i);
    if (map.containsKey(c) && map.get(c) >= start) {
        start = map.get(c) + 1;
    } else {
        maxLength = Math.max(maxLength, i - start + 1);
    }
    map.put(c, i);
}
System.out.println(maxLength); // Output: 3